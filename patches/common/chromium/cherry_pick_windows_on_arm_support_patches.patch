From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Richard Townsend <Richard.Townsend@arm.com>
Date: Wed, 24 Jul 2019 15:11:21 +0100
Subject: Cherry pick Windows on Arm support patches.

Combination of
* https://chromium-review.googlesource.com/c/crashpad/crashpad/+/1647167/12
* https://chromium-review.googlesource.com/c/crashpad/crashpad/+/1655468
* https://chromium-review.googlesource.com/c/crashpad/crashpad/+/1632749

diff --git a/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win.cc b/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win.cc
index 2a93baafa897382dce02ba185513220f39ac81e8..f07c4f67f4c5233a764c758bf4dacc805bf83077 100644
--- a/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win.cc
+++ b/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win.cc
@@ -28,6 +28,7 @@
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
 #include "util/win/module_version.h"
+#include "util/win/scoped_registry_key.h"
 
 namespace crashpad {
 
@@ -76,11 +77,9 @@ SystemSnapshotWin::SystemSnapshotWin()
       os_version_minor_(0),
       os_version_bugfix_(0),
       os_server_(false),
-      initialized_() {
-}
+      initialized_() {}
 
-SystemSnapshotWin::~SystemSnapshotWin() {
-}
+SystemSnapshotWin::~SystemSnapshotWin() {}
 
 void SystemSnapshotWin::Initialize(ProcessReaderWin* process_reader) {
   INITIALIZATION_STATE_SET_INITIALIZING(initialized_);
@@ -158,9 +157,10 @@ uint32_t SystemSnapshotWin::CPURevision() const {
   uint8_t adjusted_model = model + (extended_model << 4);
   return (adjusted_family << 16) | (adjusted_model << 8) | stepping;
 #elif defined(ARCH_CPU_ARM64)
-  // TODO(jperaza): do this. https://crashpad.chromium.org/bug/30
-  // This is the same as SystemSnapshotLinux::CPURevision.
-  return 0;
+  SYSTEM_INFO system_info;
+  GetSystemInfo(&system_info);
+
+  return system_info.wProcessorRevision;
 #else
 #error Unsupported Windows Arch
 #endif
@@ -190,9 +190,38 @@ std::string SystemSnapshotWin::CPUVendor() const {
   *reinterpret_cast<int*>(vendor + 8) = cpu_info[2];
   return std::string(vendor, sizeof(vendor));
 #elif defined(ARCH_CPU_ARM64)
-  // TODO(jperaza): do this. https://crashpad.chromium.org/bug/30
-  // This is the same as SystemSnapshotLinux::CPURevision.
-  return std::string();
+  HKEY key;
+
+  if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
+                   L"HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0",
+                   0,
+                   KEY_QUERY_VALUE,
+                   &key) != ERROR_SUCCESS) {
+    return std::string();
+  }
+
+  crashpad::ScopedRegistryKey scoped_key(key);
+  DWORD type;
+  wchar_t vendor_identifier[1024];
+  DWORD vendor_identifier_size = sizeof(vendor_identifier);
+
+  if (RegQueryValueEx(key,
+                      L"VendorIdentifier",
+                      nullptr,
+                      &type,
+                      reinterpret_cast<BYTE*>(vendor_identifier),
+                      &vendor_identifier_size) != ERROR_SUCCESS ||
+      type != REG_SZ) {
+    return std::string();
+  }
+
+  std::string return_value;
+  DCHECK_EQ(vendor_identifier_size % sizeof(wchar_t), 0u);
+  base::UTF16ToUTF8(vendor_identifier,
+                    vendor_identifier_size / sizeof(wchar_t),
+                    &return_value);
+
+  return return_value.c_str();
 #else
 #error Unsupported Windows Arch
 #endif
diff --git a/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win_test.cc b/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win_test.cc
index 8065993039880171b52327b88c96eeb6a8ed944f..906f6c6419d69697ca50b25a0a41b79eae254218 100644
--- a/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win_test.cc
+++ b/third_party/crashpad/crashpad/snapshot/win/system_snapshot_win_test.cc
@@ -17,6 +17,7 @@
 #include <sys/time.h>
 #include <time.h>
 
+#include <regex>
 #include <string>
 
 #include "build/build_config.h"
@@ -73,10 +74,14 @@ TEST_F(SystemSnapshotWinTest, CPUCount) {
 
 TEST_F(SystemSnapshotWinTest, CPUVendor) {
   std::string cpu_vendor = system_snapshot().CPUVendor();
-
-  // There are a variety of other values, but we don't expect to run our tests
-  // on them.
+#if defined(ARCH_CPU_X86_FAMILY)
   EXPECT_TRUE(cpu_vendor == "GenuineIntel" || cpu_vendor == "AuthenticAMD");
+#elif defined(ARCH_CPU_ARM64)
+  std::regex cpu_vendor_regex("[a-zA-Z0-9 \\-.]+");
+  EXPECT_TRUE(std::regex_match(cpu_vendor, cpu_vendor_regex));
+#else
+#error Unsupported Windows Arch
+#endif
 }
 
 TEST_F(SystemSnapshotWinTest, CPUX86SupportsDAZ) {
diff --git a/third_party/crashpad/crashpad/util/BUILD.gn b/third_party/crashpad/crashpad/util/BUILD.gn
index 620ae2550a0ba81fb9ad903d570d5ddbb8915b79..088a7b59a4e34bb5489ab34a0ac928f706efc8d3 100644
--- a/third_party/crashpad/crashpad/util/BUILD.gn
+++ b/third_party/crashpad/crashpad/util/BUILD.gn
@@ -396,8 +396,17 @@ static_library("util") {
           "win/safe_terminate_process.asm",
         ]
       } else {
-        # TODO: Add assembly code of CaptureContext for Windows ARM64.
-        sources += [ "misc/capture_context_broken.cc" ]
+        # Most Crashpad builds use Microsoft's armasm64.exe macro assembler for
+        # .asm source files. When building in Chromium, clang-cl is used as the
+        # assembler instead. Since the two assemblers recognize different
+        # assembly dialects, the same .asm file can't be used for each. As a
+        # workaround, use a prebuilt .obj file when the Microsoft-dialect
+        # assembler isn't available.
+        if (crashpad_is_in_chromium) {
+          sources += [ "misc/capture_context_win_arm64.obj" ]
+        } else {
+          sources += [ "misc/capture_context_win_arm64.asm" ]
+        }
       }
     } else {
       sources += [
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_fuchsia.S b/third_party/crashpad/crashpad/util/misc/capture_context_fuchsia.S
index 21aefad0b1ed0e05112060e427bbef8fd86dfee2..0ebc7f7fe8ca159268bec6dd34c2e043bc1cfc63 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context_fuchsia.S
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_fuchsia.S
@@ -116,7 +116,7 @@ CAPTURECONTEXT_SYMBOL:
   movq 0x90(%rdi), %rax
   movq 0x28(%rdi), %r8
 
-  // TODO(scottmg): save floating-point registers.
+  // TODO(https://crashpad.chromium.org/bug/300): save floating-point registers.
 
   popfq
 
@@ -166,7 +166,7 @@ CAPTURECONTEXT_SYMBOL:
   // Restore x1 from the saved context.
   ldr x1, [x0, #0xc0]
 
-  // TODO(scottmg): save floating-point registers.
+  // TODO(https://crashpad.chromium.org/bug/300): save floating-point registers.
 
   ret
 
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_linux.S b/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
index 657a979a76ea1cfc02633e8553d41005fd1a2749..de71e7231273ac2a79b3eebfde2357e3eda9f94d 100644
--- a/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_linux.S
@@ -282,7 +282,7 @@ CAPTURECONTEXT_SYMBOL2:
   // Restore r1.
   ldr r1, [r0, #0x24]
 
-  // TODO(jperaza): save floating-point registers.
+  // TODO(https://crashpad.chromium.org/bug/300): save floating-point registers.
 
   mov PC, LR
 
@@ -326,7 +326,7 @@ CAPTURECONTEXT_SYMBOL2:
   // Restore x1 from the saved context.
   ldr x1, [x0, #0xc0]
 
-  // TODO(jperaza): save floating-point registers.
+  // TODO(https://crashpad.chromium.org/bug/300): save floating-point registers.
 
   ret
 #elif defined(__mips__)
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_win_arm64.asm b/third_party/crashpad/crashpad/util/misc/capture_context_win_arm64.asm
new file mode 100644
index 0000000000000000000000000000000000000000..5630698f8d8ef198eb9f8cf28692eeaf97a961a5
--- /dev/null
+++ b/third_party/crashpad/crashpad/util/misc/capture_context_win_arm64.asm
@@ -0,0 +1,64 @@
+; Copyright 2019 The Crashpad Authors. All rights reserved.
+;
+; Licensed under the Apache License, Version 2.0 (the "License");
+; you may not use this file except in compliance with the License.
+; You may obtain a copy of the License at
+;
+;     http://www.apache.org/licenses/LICENSE-2.0
+;
+; Unless required by applicable law or agreed to in writing, software
+; distributed under the License is distributed on an "AS IS" BASIS,
+; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+; See the License for the specific language governing permissions and
+; limitations under the License.
+
+  EXPORT |?CaptureContext@crashpad@@YAXPEAU_CONTEXT@@@Z|
+  AREA |.text|, CODE
+|?CaptureContext@crashpad@@YAXPEAU_CONTEXT@@@Z| PROC
+  ; Save general purpose registers in context.regs[i].
+  ; The original x0 can't be recovered.
+  stp x0, x1, [x0, #0x008]
+  stp x2, x3, [x0, #0x018]
+  stp x4, x5, [x0, #0x028]
+  stp x6, x7, [x0, #0x038]
+  stp x8, x9, [x0, #0x048]
+  stp x10, x11, [x0, #0x058]
+  stp x12, x13, [x0, #0x068]
+  stp x14, x15, [x0, #0x078]
+  stp x16, x17, [x0, #0x088]
+  stp x18, x19, [x0, #0x098]
+  stp x20, x21, [x0, #0x0a8]
+  stp x22, x23, [x0, #0x0b8]
+  stp x24, x25, [x0, #0x0c8]
+  stp x26, x27, [x0, #0x0d8]
+  stp x28, x29, [x0, #0x0e8]
+
+  ; The original LR can't be recovered.
+  str LR, [x0, #0x0f8]
+
+  ; Use x1 as a scratch register.
+  mov x1, SP
+  str x1, [x0, #0x100] ; context.sp
+
+  ; The link register holds the return address for this function.
+  str LR, [x0, #0x108]  ; context.pc
+
+  ; pstate should hold SPSR but NZCV are the only bits we know about.
+  mrs x1, NZCV
+
+  ; Enable Control flags, such as CONTEXT_ARM64, CONTEXT_CONTROL,
+  ; CONTEXT_INTEGER
+  ldr w1, =0x00400003
+
+  ; Set ControlFlags /0x000/ and pstate /0x004/ at the same time.
+  str x1, [x0, #0x000]
+
+  ; Restore x1 from the saved context.
+  ldr x1, [x0, #0x010]
+
+  ; TODO(https://crashpad.chromium.org/bug/300): save floating-point registers
+
+  ret
+  ENDP
+
+  END
diff --git a/third_party/crashpad/crashpad/util/misc/capture_context_win_arm64.obj b/third_party/crashpad/crashpad/util/misc/capture_context_win_arm64.obj
new file mode 100644
index 0000000000000000000000000000000000000000..11c76a1aae15f8331d37063a3adc5e6ad37fcc8f
GIT binary patch
literal 614
zcmYdU#l-MIOFuS-k%57S0Rr?&QY%WJY!H<K#YjR73JeYjdMT+%rRgfcF!3os#t9e)
zN;@zJI5D&^tYqq8T*)$pX(ihn=9L^vSXOeaVO`0yg>5C@9`=<2M>tjro#9+5a)oQ9
z*d6Yb5>I$mO1<G-Df5MIrCbfe&xgzm6B!#Ae#*5l{A6^pzS_vZAOUplPeu-hp9h%Z
zuQ4+?Ft7ma`v}AxK<vT5C<wCN*(#>EC^;s%D6u%BATb5OC@sm%iOJ0@2FfKCl#~{w
z#wX|Jfjk{wo|zY)Sd?pKqL-hP#lT?0U?a%P#K7<kWE>dqF$gfs$Yf;j%}g%JFV0UZ
zQP2p|RB#OPRq#y&iYPc17pLYX<)jt?RXZf-=N9N?rp(A>X8ix3fdS~wwA92BJp%&)
zpe#g0FD)}C6=F2QKcJd)7K&V*Sey$ri~%_ofuY5~%m|7{RDc|VKyL!ofZ`AnfI=4p
sK;|$p7y(IpXGq97LjukL7RU|`k&Y1ou8yJc&i;NOt`Q*)4h~Ta0HmRmk^lez

literal 0
HcmV?d00001

diff --git a/third_party/crashpad/crashpad/util/win/process_info_test.cc b/third_party/crashpad/crashpad/util/win/process_info_test.cc
index c7abdb6f5169175f351dfe55b03c7d54b105243c..59aaa7a9eb27caae221e514366b7995b6ddfff1c 100644
--- a/third_party/crashpad/crashpad/util/win/process_info_test.cc
+++ b/third_party/crashpad/crashpad/util/win/process_info_test.cc
@@ -38,6 +38,7 @@
 #include "util/win/get_function.h"
 #include "util/win/handle.h"
 #include "util/win/scoped_handle.h"
+#include "util/win/scoped_registry_key.h"
 
 namespace crashpad {
 namespace test {
@@ -528,18 +529,6 @@ TEST(ProcessInfo, ReadableRanges) {
                                  &bytes_read));
 }
 
-struct ScopedRegistryKeyCloseTraits {
-  static HKEY InvalidValue() {
-    return nullptr;
-  }
-  static void Free(HKEY key) {
-    RegCloseKey(key);
-  }
-};
-
-using ScopedRegistryKey =
-    base::ScopedGeneric<HKEY, ScopedRegistryKeyCloseTraits>;
-
 TEST(ProcessInfo, Handles) {
   ScopedTempDir temp_dir;
 
diff --git a/third_party/crashpad/crashpad/util/win/scoped_registry_key.h b/third_party/crashpad/crashpad/util/win/scoped_registry_key.h
new file mode 100644
index 0000000000000000000000000000000000000000..4393dc209933c5680855c972adb8af91ef34e02f
--- /dev/null
+++ b/third_party/crashpad/crashpad/util/win/scoped_registry_key.h
@@ -0,0 +1,34 @@
+// Copyright 2019 The Crashpad Authors. All rights reserved.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+
+#ifndef CRASHPAD_UTIL_WIN_SCOPED_REGISTRY_KEY_H_
+#define CRASHPAD_UTIL_WIN_SCOPED_REGISTRY_KEY_H_
+
+#include <windows.h>
+
+#include "base/scoped_generic.h"
+
+namespace crashpad {
+
+struct ScopedRegistryKeyCloseTraits {
+  static HKEY InvalidValue() { return nullptr; }
+  static void Free(HKEY key) { RegCloseKey(key); }
+};
+
+using ScopedRegistryKey =
+    base::ScopedGeneric<HKEY, ScopedRegistryKeyCloseTraits>;
+
+}  // namespace crashpad
+
+#endif  // CRASHPAD_UTIL_WIN_SCOPED_REGISTRY_KEY_H_
\ No newline at end of file
